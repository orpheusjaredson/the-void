{"ast":null,"code":"var _jsxFileName = \"E:\\\\Coding\\\\The Void\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { db } from \"./firebase\";\nimport { collection, addDoc, query, orderBy, onSnapshot, serverTimestamp } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction seededRandom(seed) {\n  let x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n}\nfunction getSeed(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  return hash;\n}\nfunction randomBetween(a, b) {\n  return a + Math.random() * (b - a);\n}\nexport default function App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [viewport, setViewport] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [scattered, setScattered] = useState([]); // Scattered messages for the void\n  const [cameraOffset, setCameraOffset] = useState(0); // Virtual camera offset\n  const prevWidthRef = useRef(window.innerWidth);\n  const animationRef = useRef();\n  const containerRef = useRef();\n  const SCATTER_HEIGHT = viewport.height * 10; // Tall virtual area\n  const SPAWN_COUNT = 40; // Number of times to spawn each message\n  const ANIMATION_SPEED = 60; // px/sec\n\n  // Firestore listener\n  useEffect(() => {\n    const q = query(collection(db, \"messages\"), orderBy(\"timestamp\", \"asc\"));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const msgs = [];\n      querySnapshot.forEach(doc => {\n        msgs.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      setMessages(msgs);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Update viewport size on resize\n  useEffect(() => {\n    const handleResize = () => {\n      setViewport(prev => {\n        const newWidth = window.innerWidth;\n        const oldWidth = prevWidthRef.current;\n        setScattered(floaters => floaters.map(f => {\n          // Calculate ratio of previous X position\n          const ratio = oldWidth > f.width ? f.x / (oldWidth - f.width) : 0;\n          const newMsgWidth = Math.min(f.width, 0.6 * newWidth, 340);\n          const newX = ratio * (newWidth - newMsgWidth);\n          return {\n            ...f,\n            x: Math.max(0, Math.min(newX, newWidth - newMsgWidth)),\n            width: newMsgWidth\n          };\n        }));\n        prevWidthRef.current = newWidth;\n        return {\n          width: newWidth,\n          height: window.innerHeight\n        };\n      });\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  // Scatter messages in a tall area\n  useEffect(() => {\n    if (!messages.length) return;\n    const minFontSize = 1.0;\n    const maxFontSize = 2.0;\n    const maxWidth = Math.min(0.6 * viewport.width, 340);\n    const placed = [];\n    let nextId = 0;\n    function estimateTextHeight(text, fontSize) {\n      const charsPerLine = Math.floor(maxWidth / (fontSize * 16));\n      const lines = Math.ceil(text.length / charsPerLine);\n      return lines * fontSize * 16 * 1.2;\n    }\n    for (let spawn = 0; spawn < SPAWN_COUNT; spawn++) {\n      messages.forEach((msg, idx) => {\n        const baseSeed = getSeed(msg.id || \"\" + idx) + spawn * 100000;\n        const fontSize = 1.0 + seededRandom(baseSeed + 2) * (maxFontSize - minFontSize);\n        const width = maxWidth;\n        const height = estimateTextHeight(msg.text, fontSize);\n        const x = seededRandom(baseSeed) * (viewport.width - width);\n        const y = seededRandom(baseSeed + 100) * (SCATTER_HEIGHT - height);\n        placed.push({\n          id: `scattered-${nextId++}`,\n          text: msg.text,\n          x,\n          y,\n          fontSize,\n          width,\n          height\n        });\n      });\n    }\n    setScattered(placed);\n    // eslint-disable-next-line\n  }, [messages, viewport.width, viewport.height]);\n\n  // Animation: cameraOffset increases over time\n  useEffect(() => {\n    let last = Date.now();\n    let running = true;\n    function animate() {\n      if (!running) return;\n      const now = Date.now();\n      const dt = (now - last) / 1000;\n      last = now;\n      setCameraOffset(prev => prev + ANIMATION_SPEED * dt);\n      animationRef.current = requestAnimationFrame(animate);\n    }\n    animationRef.current = requestAnimationFrame(animate);\n    return () => {\n      running = false;\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [SCATTER_HEIGHT]);\n\n  // Mouse wheel: update cameraOffset\n  useEffect(() => {\n    const handleWheel = e => {\n      setCameraOffset(prev => prev + e.deltaY);\n    };\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener(\"wheel\", handleWheel, {\n        passive: false\n      });\n    }\n    return () => {\n      if (container) container.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n  const sendMessage = async e => {\n    e.preventDefault();\n    const trimmed = input.trim();\n    if (!trimmed) return;\n    await addDoc(collection(db, \"messages\"), {\n      text: trimmed,\n      timestamp: serverTimestamp()\n    });\n    setInput(\"\");\n  };\n\n  // Wrap cameraOffset to keep it in range (for numerical stability)\n  const wrappedCameraOffset = (cameraOffset % SCATTER_HEIGHT + SCATTER_HEIGHT) % SCATTER_HEIGHT;\n\n  // Only render messages in the visible viewport for performance\n  const visibleMessages = scattered.filter(msg => {\n    let y = msg.y - wrappedCameraOffset;\n    if (y < -msg.height) y += SCATTER_HEIGHT;\n    if (y > SCATTER_HEIGHT - msg.height) y -= SCATTER_HEIGHT;\n    return y + msg.height > 0 && y < viewport.height;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-black text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"flex-1 relative\",\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        minHeight: 0,\n        background: \"black\",\n        overflow: \"hidden\",\n        position: \"relative\"\n      },\n      tabIndex: 0,\n      children: visibleMessages.map(msg => {\n        let y = msg.y - wrappedCameraOffset;\n        if (y < -msg.height) y += SCATTER_HEIGHT;\n        if (y > SCATTER_HEIGHT - msg.height) y -= SCATTER_HEIGHT;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"absolute\",\n            left: msg.x,\n            top: y,\n            fontSize: `${msg.fontSize}em`,\n            color: \"white\",\n            maxWidth: msg.width,\n            wordBreak: \"break-word\",\n            pointerEvents: \"auto\",\n            userSelect: \"text\",\n            fontWeight: 400,\n            opacity: 0.95,\n            lineHeight: 1.2,\n            transition: \"none\"\n          },\n          children: msg.text\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"w-full flex items-center px-4 py-3 border-t border-gray-800 bg-black\",\n      autoComplete: \"off\",\n      style: {\n        position: \"sticky\",\n        bottom: 0,\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"flex-1 bg-transparent border border-gray-700 rounded px-4 py-2 text-white focus:outline-none focus:border-white placeholder-gray-500\",\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Send a message into the void...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"ml-3 px-4 py-2 bg-white text-black rounded hover:bg-gray-200 transition\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rrsYNTeKGaD4/CS8ZVZ23ZwJPlM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","db","collection","addDoc","query","orderBy","onSnapshot","serverTimestamp","jsxDEV","_jsxDEV","seededRandom","seed","x","Math","sin","floor","getSeed","str","hash","i","length","charCodeAt","randomBetween","a","b","random","App","_s","messages","setMessages","input","setInput","viewport","setViewport","width","window","innerWidth","height","innerHeight","scattered","setScattered","cameraOffset","setCameraOffset","prevWidthRef","animationRef","containerRef","SCATTER_HEIGHT","SPAWN_COUNT","ANIMATION_SPEED","q","unsubscribe","querySnapshot","msgs","forEach","doc","push","id","data","handleResize","prev","newWidth","oldWidth","current","floaters","map","f","ratio","newMsgWidth","min","newX","max","addEventListener","removeEventListener","minFontSize","maxFontSize","maxWidth","placed","nextId","estimateTextHeight","text","fontSize","charsPerLine","lines","ceil","spawn","msg","idx","baseSeed","y","last","Date","now","running","animate","dt","requestAnimationFrame","cancelAnimationFrame","handleWheel","e","deltaY","container","passive","sendMessage","preventDefault","trimmed","trim","timestamp","wrappedCameraOffset","visibleMessages","filter","className","children","ref","style","minHeight","background","overflow","position","tabIndex","left","top","color","wordBreak","pointerEvents","userSelect","fontWeight","opacity","lineHeight","transition","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","autoComplete","bottom","zIndex","type","value","onChange","target","placeholder","autoFocus","_c","$RefreshReg$"],"sources":["E:/Coding/The Void/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { db } from \"./firebase\";\nimport { collection, addDoc, query, orderBy, onSnapshot, serverTimestamp } from \"firebase/firestore\";\n\nfunction seededRandom(seed) {\n  let x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n}\n\nfunction getSeed(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  return hash;\n}\n\nfunction randomBetween(a, b) {\n  return a + Math.random() * (b - a);\n}\n\nexport default function App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [viewport, setViewport] = useState({ width: window.innerWidth, height: window.innerHeight });\n  const [scattered, setScattered] = useState([]); // Scattered messages for the void\n  const [cameraOffset, setCameraOffset] = useState(0); // Virtual camera offset\n  const prevWidthRef = useRef(window.innerWidth);\n  const animationRef = useRef();\n  const containerRef = useRef();\n  const SCATTER_HEIGHT = viewport.height * 10; // Tall virtual area\n  const SPAWN_COUNT = 40; // Number of times to spawn each message\n  const ANIMATION_SPEED = 60; // px/sec\n\n  // Firestore listener\n  useEffect(() => {\n    const q = query(collection(db, \"messages\"), orderBy(\"timestamp\", \"asc\"));\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const msgs = [];\n      querySnapshot.forEach((doc) => {\n        msgs.push({ id: doc.id, ...doc.data() });\n      });\n      setMessages(msgs);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Update viewport size on resize\n  useEffect(() => {\n    const handleResize = () => {\n      setViewport((prev) => {\n        const newWidth = window.innerWidth;\n        const oldWidth = prevWidthRef.current;\n        setScattered((floaters) =>\n          floaters.map((f) => {\n            // Calculate ratio of previous X position\n            const ratio = oldWidth > f.width ? f.x / (oldWidth - f.width) : 0;\n            const newMsgWidth = Math.min(f.width, 0.6 * newWidth, 340);\n            const newX = ratio * (newWidth - newMsgWidth);\n            return {\n              ...f,\n              x: Math.max(0, Math.min(newX, newWidth - newMsgWidth)),\n              width: newMsgWidth,\n            };\n          })\n        );\n        prevWidthRef.current = newWidth;\n        return { width: newWidth, height: window.innerHeight };\n      });\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  // Scatter messages in a tall area\n  useEffect(() => {\n    if (!messages.length) return;\n    const minFontSize = 1.0;\n    const maxFontSize = 2.0;\n    const maxWidth = Math.min(0.6 * viewport.width, 340);\n    const placed = [];\n    let nextId = 0;\n    function estimateTextHeight(text, fontSize) {\n      const charsPerLine = Math.floor(maxWidth / (fontSize * 16));\n      const lines = Math.ceil(text.length / charsPerLine);\n      return lines * fontSize * 16 * 1.2;\n    }\n    for (let spawn = 0; spawn < SPAWN_COUNT; spawn++) {\n      messages.forEach((msg, idx) => {\n        const baseSeed = getSeed(msg.id || \"\" + idx) + spawn * 100000;\n        const fontSize = 1.0 + seededRandom(baseSeed + 2) * (maxFontSize - minFontSize);\n        const width = maxWidth;\n        const height = estimateTextHeight(msg.text, fontSize);\n        const x = seededRandom(baseSeed) * (viewport.width - width);\n        const y = seededRandom(baseSeed + 100) * (SCATTER_HEIGHT - height);\n        placed.push({\n          id: `scattered-${nextId++}`,\n          text: msg.text,\n          x,\n          y,\n          fontSize,\n          width,\n          height,\n        });\n      });\n    }\n    setScattered(placed);\n    // eslint-disable-next-line\n  }, [messages, viewport.width, viewport.height]);\n\n  // Animation: cameraOffset increases over time\n  useEffect(() => {\n    let last = Date.now();\n    let running = true;\n    function animate() {\n      if (!running) return;\n      const now = Date.now();\n      const dt = (now - last) / 1000;\n      last = now;\n      setCameraOffset((prev) => prev + ANIMATION_SPEED * dt);\n      animationRef.current = requestAnimationFrame(animate);\n    }\n    animationRef.current = requestAnimationFrame(animate);\n    return () => {\n      running = false;\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [SCATTER_HEIGHT]);\n\n  // Mouse wheel: update cameraOffset\n  useEffect(() => {\n    const handleWheel = (e) => {\n      setCameraOffset((prev) => prev + e.deltaY);\n    };\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener(\"wheel\", handleWheel, { passive: false });\n    }\n    return () => {\n      if (container) container.removeEventListener(\"wheel\", handleWheel);\n    };\n  }, []);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const trimmed = input.trim();\n    if (!trimmed) return;\n    await addDoc(collection(db, \"messages\"), {\n      text: trimmed,\n      timestamp: serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n\n  // Wrap cameraOffset to keep it in range (for numerical stability)\n  const wrappedCameraOffset = ((cameraOffset % SCATTER_HEIGHT) + SCATTER_HEIGHT) % SCATTER_HEIGHT;\n\n  // Only render messages in the visible viewport for performance\n  const visibleMessages = scattered.filter((msg) => {\n    let y = msg.y - wrappedCameraOffset;\n    if (y < -msg.height) y += SCATTER_HEIGHT;\n    if (y > SCATTER_HEIGHT - msg.height) y -= SCATTER_HEIGHT;\n    return y + msg.height > 0 && y < viewport.height;\n  });\n\n  return (\n    <div className=\"flex flex-col h-screen bg-black text-white\">\n      <div\n        ref={containerRef}\n        className=\"flex-1 relative\"\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          minHeight: 0,\n          background: \"black\",\n          overflow: \"hidden\",\n          position: \"relative\",\n        }}\n        tabIndex={0}\n      >\n        {visibleMessages.map((msg) => {\n          let y = msg.y - wrappedCameraOffset;\n          if (y < -msg.height) y += SCATTER_HEIGHT;\n          if (y > SCATTER_HEIGHT - msg.height) y -= SCATTER_HEIGHT;\n          return (\n            <div\n              key={msg.id}\n              style={{\n                position: \"absolute\",\n                left: msg.x,\n                top: y,\n                fontSize: `${msg.fontSize}em`,\n                color: \"white\",\n                maxWidth: msg.width,\n                wordBreak: \"break-word\",\n                pointerEvents: \"auto\",\n                userSelect: \"text\",\n                fontWeight: 400,\n                opacity: 0.95,\n                lineHeight: 1.2,\n                transition: \"none\",\n              }}\n            >\n              {msg.text}\n            </div>\n          );\n        })}\n      </div>\n      <form\n        onSubmit={sendMessage}\n        className=\"w-full flex items-center px-4 py-3 border-t border-gray-800 bg-black\"\n        autoComplete=\"off\"\n        style={{ position: \"sticky\", bottom: 0, zIndex: 10 }}\n      >\n        <input\n          className=\"flex-1 bg-transparent border border-gray-700 rounded px-4 py-2 text-white focus:outline-none focus:border-white placeholder-gray-500\"\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Send a message into the void...\"\n          autoFocus\n        />\n        <button\n          type=\"submit\"\n          className=\"ml-3 px-4 py-2 bg-white text-black rounded hover:bg-gray-200 transition\"\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}