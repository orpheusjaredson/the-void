{"ast":null,"code":"var _jsxFileName = \"E:\\\\Coding\\\\The Void\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { db } from \"./firebase\";\nimport { collection, addDoc, query, orderBy, onSnapshot, serverTimestamp } from \"firebase/firestore\";\n\n// Deterministic pseudo-random for consistent placement\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction seededRandom(seed) {\n  let x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n}\nfunction getSeed(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  return hash;\n}\n\n// Collision detection for rectangles\nfunction isOverlapping(a, b) {\n  return !(a.left + a.width < b.left || a.left > b.left + b.width || a.top + a.height < b.top || a.top > b.top + b.height);\n}\nexport default function App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [viewport, setViewport] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const q = query(collection(db, \"messages\"), orderBy(\"timestamp\", \"asc\"));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const msgs = [];\n      querySnapshot.forEach(doc => {\n        msgs.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      setMessages(msgs);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Update viewport size on resize\n  useEffect(() => {\n    const handleResize = () => {\n      setViewport({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  const minFontSize = 0.9;\n  const maxFontSize = 1.5;\n  const maxWidth = Math.min(0.5 * viewport.width, 300); // Smaller max width\n  const lineHeight = 1.2;\n  const maxTries = 200;\n\n  // Infinite scroll settings\n  const spawnCount = 40; // Number of times to spawn each message\n  const scatterHeight = viewport.height * 20; // Very tall canvas\n\n  // Estimate text height based on font size and length\n  function estimateTextHeight(text, fontSize) {\n    // Estimate number of lines\n    const charsPerLine = Math.floor(maxWidth / (fontSize * 16));\n    const lines = Math.ceil(text.length / charsPerLine);\n    return lines * fontSize * 16 * lineHeight;\n  }\n\n  // Randomly spawn each message multiple times throughout the canvas\n  function getRandomlyScatteredMessages(messages) {\n    const placed = [];\n    for (let spawn = 0; spawn < spawnCount; spawn++) {\n      messages.forEach((msg, idx) => {\n        const baseSeed = getSeed(msg.id || \"\" + idx) + spawn * 100000;\n        const fontSize = minFontSize + seededRandom(baseSeed + 2) * (maxFontSize - minFontSize);\n        const width = maxWidth;\n        const height = estimateTextHeight(msg.text, fontSize);\n        let found = false;\n        let left, top;\n        for (let attempt = 0; attempt < maxTries; attempt++) {\n          const randX = seededRandom(baseSeed + attempt) * 0.8 + 0.1; // 0.1 to 0.9\n          const randY = seededRandom(baseSeed + 100 + attempt) * 0.98 + 0.01; // 0.01 to 0.99\n          // Clamp so message is always fully visible\n          left = randX * (viewport.width - width);\n          top = randY * (scatterHeight - height - 70); // 70px for input at bottom\n          left = Math.max(0, Math.min(left, viewport.width - width));\n          top = Math.max(0, Math.min(top, scatterHeight - height - 70));\n          const rect = {\n            left,\n            top,\n            width,\n            height\n          };\n          if (!placed.some(p => isOverlapping(rect, p))) {\n            found = true;\n            placed.push({\n              ...rect,\n              fontSize,\n              text: msg.text,\n              id: msg.id,\n              key: `${msg.id}-spawn${spawn}`\n            });\n            break;\n          }\n        }\n        if (!found) {\n          // Skip this message if it cannot be placed without overlap\n          return;\n        }\n      });\n    }\n    return placed;\n  }\n  const scatteredMessages = getRandomlyScatteredMessages(messages);\n  const sendMessage = async e => {\n    e.preventDefault();\n    const trimmed = input.trim();\n    if (!trimmed) return;\n    await addDoc(collection(db, \"messages\"), {\n      text: trimmed,\n      timestamp: serverTimestamp()\n    });\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-black text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 relative overflow-auto\",\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        minHeight: 0,\n        background: \"black\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          width: viewport.width,\n          height: scatterHeight,\n          margin: \"0 auto\"\n        },\n        children: [scatteredMessages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"absolute\",\n            left: msg.left,\n            top: msg.top,\n            fontSize: `${msg.fontSize}em`,\n            color: \"white\",\n            maxWidth: maxWidth,\n            wordBreak: \"break-word\",\n            pointerEvents: \"auto\",\n            userSelect: \"text\",\n            fontWeight: 400,\n            opacity: 0.95,\n            lineHeight\n          },\n          children: msg.text\n        }, msg.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"w-full flex items-center px-4 py-3 border-t border-gray-800 bg-black\",\n      autoComplete: \"off\",\n      style: {\n        position: \"sticky\",\n        bottom: 0,\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"flex-1 bg-transparent border border-gray-700 rounded px-4 py-2 text-white focus:outline-none focus:border-white placeholder-gray-500\",\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Send a message into the void...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"ml-3 px-4 py-2 bg-white text-black rounded hover:bg-gray-200 transition\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zew/Rh5I5QN1aYq9L9OR6FmYMTA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","db","collection","addDoc","query","orderBy","onSnapshot","serverTimestamp","jsxDEV","_jsxDEV","seededRandom","seed","x","Math","sin","floor","getSeed","str","hash","i","length","charCodeAt","isOverlapping","a","b","left","width","top","height","App","_s","messages","setMessages","input","setInput","viewport","setViewport","window","innerWidth","innerHeight","messagesEndRef","q","unsubscribe","querySnapshot","msgs","forEach","doc","push","id","data","handleResize","addEventListener","removeEventListener","minFontSize","maxFontSize","maxWidth","min","lineHeight","maxTries","spawnCount","scatterHeight","estimateTextHeight","text","fontSize","charsPerLine","lines","ceil","getRandomlyScatteredMessages","placed","spawn","msg","idx","baseSeed","found","attempt","randX","randY","max","rect","some","p","key","scatteredMessages","sendMessage","e","preventDefault","trimmed","trim","timestamp","className","children","style","minHeight","background","position","margin","map","color","wordBreak","pointerEvents","userSelect","fontWeight","opacity","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","autoComplete","bottom","zIndex","type","value","onChange","target","placeholder","autoFocus","_c","$RefreshReg$"],"sources":["E:/Coding/The Void/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { db } from \"./firebase\";\nimport { collection, addDoc, query, orderBy, onSnapshot, serverTimestamp } from \"firebase/firestore\";\n\n// Deterministic pseudo-random for consistent placement\nfunction seededRandom(seed) {\n  let x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n}\n\nfunction getSeed(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  return hash;\n}\n\n// Collision detection for rectangles\nfunction isOverlapping(a, b) {\n  return !(\n    a.left + a.width < b.left ||\n    a.left > b.left + b.width ||\n    a.top + a.height < b.top ||\n    a.top > b.top + b.height\n  );\n}\n\nexport default function App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [viewport, setViewport] = useState({ width: window.innerWidth, height: window.innerHeight });\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    const q = query(collection(db, \"messages\"), orderBy(\"timestamp\", \"asc\"));\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const msgs = [];\n      querySnapshot.forEach((doc) => {\n        msgs.push({ id: doc.id, ...doc.data() });\n      });\n      setMessages(msgs);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Update viewport size on resize\n  useEffect(() => {\n    const handleResize = () => {\n      setViewport({ width: window.innerWidth, height: window.innerHeight });\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const minFontSize = 0.9;\n  const maxFontSize = 1.5;\n  const maxWidth = Math.min(0.5 * viewport.width, 300); // Smaller max width\n  const lineHeight = 1.2;\n  const maxTries = 200;\n\n  // Infinite scroll settings\n  const spawnCount = 40; // Number of times to spawn each message\n  const scatterHeight = viewport.height * 20; // Very tall canvas\n\n  // Estimate text height based on font size and length\n  function estimateTextHeight(text, fontSize) {\n    // Estimate number of lines\n    const charsPerLine = Math.floor(maxWidth / (fontSize * 16));\n    const lines = Math.ceil(text.length / charsPerLine);\n    return lines * fontSize * 16 * lineHeight;\n  }\n\n  // Randomly spawn each message multiple times throughout the canvas\n  function getRandomlyScatteredMessages(messages) {\n    const placed = [];\n    for (let spawn = 0; spawn < spawnCount; spawn++) {\n      messages.forEach((msg, idx) => {\n        const baseSeed = getSeed(msg.id || \"\" + idx) + spawn * 100000;\n        const fontSize = minFontSize + seededRandom(baseSeed + 2) * (maxFontSize - minFontSize);\n        const width = maxWidth;\n        const height = estimateTextHeight(msg.text, fontSize);\n        let found = false;\n        let left, top;\n        for (let attempt = 0; attempt < maxTries; attempt++) {\n          const randX = seededRandom(baseSeed + attempt) * 0.8 + 0.1; // 0.1 to 0.9\n          const randY = seededRandom(baseSeed + 100 + attempt) * 0.98 + 0.01; // 0.01 to 0.99\n          // Clamp so message is always fully visible\n          left = randX * (viewport.width - width);\n          top = randY * (scatterHeight - height - 70); // 70px for input at bottom\n          left = Math.max(0, Math.min(left, viewport.width - width));\n          top = Math.max(0, Math.min(top, scatterHeight - height - 70));\n          const rect = { left, top, width, height };\n          if (!placed.some((p) => isOverlapping(rect, p))) {\n            found = true;\n            placed.push({ ...rect, fontSize, text: msg.text, id: msg.id, key: `${msg.id}-spawn${spawn}` });\n            break;\n          }\n        }\n        if (!found) {\n          // Skip this message if it cannot be placed without overlap\n          return;\n        }\n      });\n    }\n    return placed;\n  }\n\n  const scatteredMessages = getRandomlyScatteredMessages(messages);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const trimmed = input.trim();\n    if (!trimmed) return;\n    await addDoc(collection(db, \"messages\"), {\n      text: trimmed,\n      timestamp: serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-black text-white\">\n      <div\n        className=\"flex-1 relative overflow-auto\"\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          minHeight: 0,\n          background: \"black\",\n        }}\n      >\n        <div\n          style={{\n            position: \"relative\",\n            width: viewport.width,\n            height: scatterHeight,\n            margin: \"0 auto\",\n          }}\n        >\n          {scatteredMessages.map((msg) => (\n            <div\n              key={msg.key}\n              style={{\n                position: \"absolute\",\n                left: msg.left,\n                top: msg.top,\n                fontSize: `${msg.fontSize}em`,\n                color: \"white\",\n                maxWidth: maxWidth,\n                wordBreak: \"break-word\",\n                pointerEvents: \"auto\",\n                userSelect: \"text\",\n                fontWeight: 400,\n                opacity: 0.95,\n                lineHeight,\n              }}\n            >\n              {msg.text}\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n      <form\n        onSubmit={sendMessage}\n        className=\"w-full flex items-center px-4 py-3 border-t border-gray-800 bg-black\"\n        autoComplete=\"off\"\n        style={{ position: \"sticky\", bottom: 0, zIndex: 10 }}\n      >\n        <input\n          className=\"flex-1 bg-transparent border border-gray-700 rounded px-4 py-2 text-white focus:outline-none focus:border-white placeholder-gray-500\"\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Send a message into the void...\"\n          autoFocus\n        />\n        <button\n          type=\"submit\"\n          className=\"ml-3 px-4 py-2 bg-white text-black rounded hover:bg-gray-200 transition\"\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}